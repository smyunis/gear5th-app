// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"gitlab.com/gear5th/gear5th-app/internal/application"
	"gitlab.com/gear5th/gear5th-app/internal/application/adsinteractors"
	"gitlab.com/gear5th/gear5th-app/internal/application/advertiserinteractors"
	"gitlab.com/gear5th/gear5th-app/internal/application/identityinteractors"
	"gitlab.com/gear5th/gear5th-app/internal/application/publisherinteractors"
	"gitlab.com/gear5th/gear5th-app/internal/infrastructure"
	"gitlab.com/gear5th/gear5th-app/internal/infrastructure/adslothtml"
	"gitlab.com/gear5th/gear5th-app/internal/infrastructure/identity/googleoauth"
	"gitlab.com/gear5th/gear5th-app/internal/infrastructure/identity/tokens"
	"gitlab.com/gear5th/gear5th-app/internal/infrastructure/keyvaluestore/rediskeyvaluestore"
	"gitlab.com/gear5th/gear5th-app/internal/infrastructure/mail/identityemail"
	"gitlab.com/gear5th/gear5th-app/internal/infrastructure/siteverification"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/adspersistence/adclickrepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/advertiserpersistence/adpiecerepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/advertiserpersistence/campaignrepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/filestore"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/identitypersistence/manageduserrepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/identitypersistence/oauthuserrepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/identitypersistence/userrepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/publisherpersistence/adslotrepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/publisherpersistence/publisherrepository"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/publisherpersistence/publishersignupunitofwork"
	"gitlab.com/gear5th/gear5th-app/internal/persistence/mongodbpersistence/publisherpersistence/siterepository"
	"gitlab.com/gear5th/gear5th-app/web/controllers/ads/adclickcontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/ads/adservercontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/advertiser/adpiececontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/advertiser/campaigncontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/publish/accountcontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/publish/adslotcontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/publish/homecontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/publish/identitycontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/publish/publishercontrollers"
	"gitlab.com/gear5th/gear5th-app/web/controllers/publish/sitecontrollers"
	"gitlab.com/gear5th/gear5th-app/web/events"
	"gitlab.com/gear5th/gear5th-app/web/middlewares"
)

// Injectors from dependecyproviders.go:

func InitJwtAuthenticationMiddleware() middlewares.JwtAuthenticationMiddleware {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	return jwtAuthenticationMiddleware
}

func InitManagedUserController() identitycontrollers.UserSignInController {
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBMangageUserRepository := manageduserrepository.NewMongoDBMangageUserRepository(mongoDBStoreBootstrap)
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	requestPassordResetEmailService := identityemail.NewRequestPassordResetEmailService(envConfigurationProvider, hs256HMACValidationService, appLogger)
	managedUserInteractor := identityinteractors.NewManagedUserInteractor(inMemoryEventDispatcher, mongoDBUserRepositoryCached, mongoDBMangageUserRepository, jwtAccessTokenService, requestPassordResetEmailService, hs256HMACValidationService)
	userSignInController := identitycontrollers.NewUserSignInController(managedUserInteractor, appLogger)
	return userSignInController
}

func InitOAuthSignInController() identitycontrollers.OAuthSignInController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	mongoDBOAuthUserRepository := oauthuserrepository.NewMongoDBOAuthUserRepository(mongoDBStoreBootstrap)
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	googleOAuthServiceImpl := googleoauth.NewGoogleOAuthService()
	oAuthUserInteractor := identityinteractors.NewOAuthUserInteractor(mongoDBOAuthUserRepository, jwtAccessTokenService, googleOAuthServiceImpl)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	oAuthSignInController := identitycontrollers.NewOAuthSignInController(oAuthUserInteractor, appLogger)
	return oAuthSignInController
}

func InitPublisherSignUpController() publishercontrollers.PublisherSignUpController {
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBMangageUserRepository := manageduserrepository.NewMongoDBMangageUserRepository(mongoDBStoreBootstrap)
	mongoDBOAuthUserRepository := oauthuserrepository.NewMongoDBOAuthUserRepository(mongoDBStoreBootstrap)
	mongoDBPublisherRepository := publisherrepository.NewMongoDBPublisherRepository(mongoDBStoreBootstrap)
	mongoDBPublisherSignUpUnitOfWork := publishersignupunitofwork.NewMongoDBPublisherSignUpUnitOfWork(mongoDBStoreBootstrap, mongoDBUserRepositoryCached, mongoDBMangageUserRepository, mongoDBOAuthUserRepository, mongoDBPublisherRepository)
	googleOAuthServiceImpl := googleoauth.NewGoogleOAuthService()
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	publisherSignUpInteractor := publisherinteractors.NewPublisherSignUpInteractor(inMemoryEventDispatcher, mongoDBPublisherSignUpUnitOfWork, googleOAuthServiceImpl, appLogger)
	publisherSignUpController := publishercontrollers.NewPublisherSignUpController(publisherSignUpInteractor, appLogger)
	return publisherSignUpController
}

func InitRequestPasswordResetController() identitycontrollers.RequestPasswordResetController {
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBMangageUserRepository := manageduserrepository.NewMongoDBMangageUserRepository(mongoDBStoreBootstrap)
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	requestPassordResetEmailService := identityemail.NewRequestPassordResetEmailService(envConfigurationProvider, hs256HMACValidationService, appLogger)
	managedUserInteractor := identityinteractors.NewManagedUserInteractor(inMemoryEventDispatcher, mongoDBUserRepositoryCached, mongoDBMangageUserRepository, jwtAccessTokenService, requestPassordResetEmailService, hs256HMACValidationService)
	requestPasswordResetController := identitycontrollers.NewRequestPasswordResetController(managedUserInteractor, appLogger)
	return requestPasswordResetController
}

func InitVerifyEmailController() identitycontrollers.VerifyEmailController {
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBMangageUserRepository := manageduserrepository.NewMongoDBMangageUserRepository(mongoDBStoreBootstrap)
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	requestPassordResetEmailService := identityemail.NewRequestPassordResetEmailService(envConfigurationProvider, hs256HMACValidationService, appLogger)
	managedUserInteractor := identityinteractors.NewManagedUserInteractor(inMemoryEventDispatcher, mongoDBUserRepositoryCached, mongoDBMangageUserRepository, jwtAccessTokenService, requestPassordResetEmailService, hs256HMACValidationService)
	verifyEmailController := identitycontrollers.NewVerifyEmailController(managedUserInteractor, appLogger)
	return verifyEmailController
}

func InitResetPasswordController() identitycontrollers.ResetPasswordController {
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBMangageUserRepository := manageduserrepository.NewMongoDBMangageUserRepository(mongoDBStoreBootstrap)
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	requestPassordResetEmailService := identityemail.NewRequestPassordResetEmailService(envConfigurationProvider, hs256HMACValidationService, appLogger)
	managedUserInteractor := identityinteractors.NewManagedUserInteractor(inMemoryEventDispatcher, mongoDBUserRepositoryCached, mongoDBMangageUserRepository, jwtAccessTokenService, requestPassordResetEmailService, hs256HMACValidationService)
	resetPasswordController := identitycontrollers.NewResetPasswordController(managedUserInteractor, appLogger)
	return resetPasswordController
}

func InitHomeController() homecontrollers.HomeController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	homeController := homecontrollers.NewHomeController(jwtAuthenticationMiddleware)
	return homeController
}

func InitSiteController() sitecontrollers.SiteController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBSiteRepository := siterepository.NewMongoDBSiteRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	appHTTPClient := infrastructure.NewAppHTTPClient()
	adsTxtVerificationService := siteverification.NewAdsTxtVerificationService(appHTTPClient, appLogger)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	siteInteractor := publisherinteractors.NewSiteInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, adsTxtVerificationService, inMemoryEventDispatcher, appLogger)
	siteController := sitecontrollers.NewSiteController(jwtAuthenticationMiddleware, siteInteractor, appLogger)
	return siteController
}

func InitCreateSiteController() sitecontrollers.CreateSiteController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBSiteRepository := siterepository.NewMongoDBSiteRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	appHTTPClient := infrastructure.NewAppHTTPClient()
	adsTxtVerificationService := siteverification.NewAdsTxtVerificationService(appHTTPClient, appLogger)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	siteInteractor := publisherinteractors.NewSiteInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, adsTxtVerificationService, inMemoryEventDispatcher, appLogger)
	createSiteController := sitecontrollers.NewCreateSiteController(jwtAuthenticationMiddleware, siteInteractor, appLogger)
	return createSiteController
}

func InitVerifySiteController() sitecontrollers.VerifySiteController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBSiteRepository := siterepository.NewMongoDBSiteRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	appHTTPClient := infrastructure.NewAppHTTPClient()
	adsTxtVerificationService := siteverification.NewAdsTxtVerificationService(appHTTPClient, appLogger)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	siteInteractor := publisherinteractors.NewSiteInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, adsTxtVerificationService, inMemoryEventDispatcher, appLogger)
	verifySiteController := sitecontrollers.NewVerifySiteController(jwtAuthenticationMiddleware, siteInteractor, appLogger)
	return verifySiteController
}

func InitAdSlotController() adslotcontrollers.AdSlotController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBSiteRepository := siterepository.NewMongoDBSiteRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBAdSlotRepository := adslotrepository.NewMongoDBAdSlotRepository(mongoDBStoreBootstrap, appLogger)
	adSlotHTMLSnippetService := adslothtml.NewAdSlotHTMLSnippetService(envConfigurationProvider)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	adSlotInteractor := publisherinteractors.NewAdSlotInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, mongoDBAdSlotRepository, adSlotHTMLSnippetService, inMemoryEventDispatcher)
	adSlotController := adslotcontrollers.NewAdSlotController(jwtAuthenticationMiddleware, adSlotInteractor, appLogger)
	return adSlotController
}

func InitCreateAdSlotController() adslotcontrollers.CreateAdSlotController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBSiteRepository := siterepository.NewMongoDBSiteRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBAdSlotRepository := adslotrepository.NewMongoDBAdSlotRepository(mongoDBStoreBootstrap, appLogger)
	adSlotHTMLSnippetService := adslothtml.NewAdSlotHTMLSnippetService(envConfigurationProvider)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	adSlotInteractor := publisherinteractors.NewAdSlotInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, mongoDBAdSlotRepository, adSlotHTMLSnippetService, inMemoryEventDispatcher)
	appHTTPClient := infrastructure.NewAppHTTPClient()
	adsTxtVerificationService := siteverification.NewAdsTxtVerificationService(appHTTPClient, appLogger)
	siteInteractor := publisherinteractors.NewSiteInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, adsTxtVerificationService, inMemoryEventDispatcher, appLogger)
	createAdSlotController := adslotcontrollers.NewCreateAdSlotController(jwtAuthenticationMiddleware, adSlotInteractor, siteInteractor, appLogger)
	return createAdSlotController
}

func InitEditAdSlotController() adslotcontrollers.EditAdSlotController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBSiteRepository := siterepository.NewMongoDBSiteRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBAdSlotRepository := adslotrepository.NewMongoDBAdSlotRepository(mongoDBStoreBootstrap, appLogger)
	adSlotHTMLSnippetService := adslothtml.NewAdSlotHTMLSnippetService(envConfigurationProvider)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	adSlotInteractor := publisherinteractors.NewAdSlotInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, mongoDBAdSlotRepository, adSlotHTMLSnippetService, inMemoryEventDispatcher)
	editAdSlotController := adslotcontrollers.NewEditAdSlotController(jwtAuthenticationMiddleware, adSlotInteractor, appLogger)
	return editAdSlotController
}

func InitAdSlotIntegrationSnippetController() adslotcontrollers.AdSlotIntegrationSnippetController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBSiteRepository := siterepository.NewMongoDBSiteRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBAdSlotRepository := adslotrepository.NewMongoDBAdSlotRepository(mongoDBStoreBootstrap, appLogger)
	adSlotHTMLSnippetService := adslothtml.NewAdSlotHTMLSnippetService(envConfigurationProvider)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	adSlotInteractor := publisherinteractors.NewAdSlotInteractor(mongoDBSiteRepository, mongoDBUserRepositoryCached, mongoDBAdSlotRepository, adSlotHTMLSnippetService, inMemoryEventDispatcher)
	adSlotIntegrationSnippetController := adslotcontrollers.NewAdSlotIntegrationSnippetController(jwtAuthenticationMiddleware, adSlotInteractor, appLogger)
	return adSlotIntegrationSnippetController
}

func InitAccountController() accountcontrollers.AccountController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	jwtAccessTokenService := tokens.NewJwtAccessTokenService(envConfigurationProvider)
	jwtAuthenticationMiddleware := middlewares.NewJwtAuthenticationMiddleware(jwtAccessTokenService)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBMangageUserRepository := manageduserrepository.NewMongoDBMangageUserRepository(mongoDBStoreBootstrap)
	userAccountInteractor := identityinteractors.NewUserAccountInteractor(mongoDBUserRepositoryCached, mongoDBMangageUserRepository)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	accountController := accountcontrollers.NewAccountController(jwtAuthenticationMiddleware, userAccountInteractor, appLogger)
	return accountController
}

func InitAdPieceController() adpiececontrollers.AdPieceController {
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	advertiserRefferalMiddleware := middlewares.NewAdvertiserRefferalMiddleware(hs256HMACValidationService)
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBAdPieceRepository := adpiecerepository.NewMongoDBAdPieceRepository(mongoDBStoreBootstrap, appLogger)
	mongoDBCampaignRepository := campaignrepository.NewMongoDBCampaignRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	adPieceInteractor := advertiserinteractors.NewAdPieceInteractor(mongoDBAdPieceRepository, mongoDBCampaignRepository, mongoDBUserRepositoryCached, inMemoryEventDispatcher)
	mongoDBGridFSFileStore := filestore.NewMongoDBGridFSFileStore(mongoDBStoreBootstrap)
	campaignInteractor := advertiserinteractors.NewCampaignInteractor(mongoDBCampaignRepository, mongoDBUserRepositoryCached, mongoDBAdPieceRepository, mongoDBGridFSFileStore, inMemoryEventDispatcher)
	adPieceController := adpiececontrollers.NewAdPieceController(advertiserRefferalMiddleware, adPieceInteractor, campaignInteractor, mongoDBGridFSFileStore, appLogger)
	return adPieceController
}

func InitAddAdPieceController() adpiececontrollers.AddAdPieceController {
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	advertiserRefferalMiddleware := middlewares.NewAdvertiserRefferalMiddleware(hs256HMACValidationService)
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBAdPieceRepository := adpiecerepository.NewMongoDBAdPieceRepository(mongoDBStoreBootstrap, appLogger)
	mongoDBCampaignRepository := campaignrepository.NewMongoDBCampaignRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	adPieceInteractor := advertiserinteractors.NewAdPieceInteractor(mongoDBAdPieceRepository, mongoDBCampaignRepository, mongoDBUserRepositoryCached, inMemoryEventDispatcher)
	mongoDBGridFSFileStore := filestore.NewMongoDBGridFSFileStore(mongoDBStoreBootstrap)
	campaignInteractor := advertiserinteractors.NewCampaignInteractor(mongoDBCampaignRepository, mongoDBUserRepositoryCached, mongoDBAdPieceRepository, mongoDBGridFSFileStore, inMemoryEventDispatcher)
	addAdPieceController := adpiececontrollers.NewAddAdPieceController(advertiserRefferalMiddleware, adPieceInteractor, campaignInteractor, mongoDBGridFSFileStore, appLogger)
	return addAdPieceController
}

func InitCampaignController() campaigncontrollers.CampaignController {
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	advertiserRefferalMiddleware := middlewares.NewAdvertiserRefferalMiddleware(hs256HMACValidationService)
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBCampaignRepository := campaignrepository.NewMongoDBCampaignRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	mongoDBAdPieceRepository := adpiecerepository.NewMongoDBAdPieceRepository(mongoDBStoreBootstrap, appLogger)
	mongoDBGridFSFileStore := filestore.NewMongoDBGridFSFileStore(mongoDBStoreBootstrap)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	campaignInteractor := advertiserinteractors.NewCampaignInteractor(mongoDBCampaignRepository, mongoDBUserRepositoryCached, mongoDBAdPieceRepository, mongoDBGridFSFileStore, inMemoryEventDispatcher)
	campaignController := campaigncontrollers.NewCampaignController(advertiserRefferalMiddleware, campaignInteractor, mongoDBGridFSFileStore, appLogger)
	return campaignController
}

func InitAdServerController() adservercontrollers.AdServerController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBCampaignRepository := campaignrepository.NewMongoDBCampaignRepository(mongoDBStoreBootstrap, appLogger)
	mongoDBAdPieceRepository := adpiecerepository.NewMongoDBAdPieceRepository(mongoDBStoreBootstrap, appLogger)
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	adsPool := adsinteractors.NewAdsPool(redisKeyValueStore, mongoDBCampaignRepository, mongoDBAdPieceRepository, hs256HMACValidationService, appLogger)
	adServerController := adservercontrollers.NewAdServerController(adsPool, appLogger)
	return adServerController
}

func InitAdClickController() adclickcontrollers.AdClickController {
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBAdPieceRepository := adpiecerepository.NewMongoDBAdPieceRepository(mongoDBStoreBootstrap, appLogger)
	mongoDBCampaignRepository := campaignrepository.NewMongoDBCampaignRepository(mongoDBStoreBootstrap, appLogger)
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBUserRepositoryCached := userrepository.NewMongoDBUserRepositoryCached(mongoDBStoreBootstrap, redisKeyValueStore)
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	adPieceInteractor := advertiserinteractors.NewAdPieceInteractor(mongoDBAdPieceRepository, mongoDBCampaignRepository, mongoDBUserRepositoryCached, inMemoryEventDispatcher)
	mongoDBAdClickRepository := adclickrepository.NewMongoDBAdClickRepository(mongoDBStoreBootstrap, appLogger)
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	adClickInteractor := adsinteractors.NewAdClickInteractor(mongoDBAdClickRepository, redisKeyValueStore, hs256HMACValidationService, inMemoryEventDispatcher, appLogger)
	adClickController := adclickcontrollers.NewAdClickController(adPieceInteractor, adClickInteractor, appLogger)
	return adClickController
}

func InitEventsRegistrar() events.EventHandlerRegistrar {
	inMemoryEventDispatcher := application.NewAppEventDispatcher()
	envConfigurationProvider := infrastructure.NewEnvConfigurationProvider()
	redisBootstrapper := rediskeyvaluestore.NewRedisBootstrapper(envConfigurationProvider)
	redisKeyValueStore := rediskeyvaluestore.NewRedisKeyValueStore(redisBootstrapper)
	mongoDBStoreBootstrap := mongodbpersistence.NewMongoDBStoreBootstrap(envConfigurationProvider)
	appLogger := infrastructure.NewAppLogger(envConfigurationProvider)
	mongoDBCampaignRepository := campaignrepository.NewMongoDBCampaignRepository(mongoDBStoreBootstrap, appLogger)
	mongoDBAdPieceRepository := adpiecerepository.NewMongoDBAdPieceRepository(mongoDBStoreBootstrap, appLogger)
	hs256HMACValidationService := tokens.NewHS256HMACValidationService()
	adsPool := adsinteractors.NewAdsPool(redisKeyValueStore, mongoDBCampaignRepository, mongoDBAdPieceRepository, hs256HMACValidationService, appLogger)
	verifcationEmailSender := identityemail.NewVerifcationEmailSender(envConfigurationProvider, hs256HMACValidationService, appLogger)
	verificationEmailInteractor := identityinteractors.NewVerificationEmailInteractor(verifcationEmailSender, appLogger)
	eventHandlerRegistrar := events.NewEventHandlerRegistrar(inMemoryEventDispatcher, adsPool, verificationEmailInteractor)
	return eventHandlerRegistrar
}
